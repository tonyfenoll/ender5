[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT
gcode:
    M117 Homing...                 ; display message
    G28
    Z_TILT_ADJUST
    G28
   G0 X175 Y175 Z30 F3600
   
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    G1 X20 Y210
    M84 XYE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro Z_TILT_ADJUST]
rename_existing: BASE_Z_TILT_ADJUST
gcode:
    G28
    BASE_Z_TILT_ADJUST
    G28 Z

# [gcode_macro Z_ALIGN]
# gcode:
#	G28         	   #home all         
#	Z_TILT_ADJUST      #initiate z tilt function

[gcode_macro MY_CORNER]
gcode:
 G0X10Y5F12000
 G0 Z30 F720
  
[gcode_macro B_CenterBed]
gcode: 
 #G0 Z5 F720
 G0 X225 Y208.5 F12000
 
[gcode_macro B_PAPER]
gcode:
 G0 Z0.1F300
 
[gcode_macro C_RAISE_5]
gcode:
 G0Z5F720

[gcode_macro APPLY_PROBE_OFFSET]
gcode:
 Z_OFFSET_APPLY_PROBE
 SAVE_CONFIG

[gcode_macro BLT_TouchMode]
gcode:
 BLTOUCH_DEBUG COMMAND=touch_mode

[gcode_macro QUEARY_PROBE]
gcode:
 QUERY_PROBE 
 
[gcode_macro D_GETPOSITION]
gcode:
 GET_POSITION 
 
[gcode_macro D_PROBEACCURACY]
gcode:
 PROBE_ACCURACY
 
[gcode_macro D_Probe]
gcode:
 probe
 
[gcode_macro D_Probe_Deploy]
gcode:
 BLTOUCH_DEBUG COMMAND=pin_down
 
[gcode_macro D_Probe_Retract]
gcode:
 BLTOUCH_DEBUG COMMAND=pin_up
 
[gcode_macro D_Probe_Reset]
gcode:
 BLTOUCH_DEBUG COMMAND=reset

[gcode_macro Test_RES_Y]
gcode: 
 TEST_RESONANCES AXIS=Y
 
[gcode_macro Test_RES_X]
gcode: 
 TEST_RESONANCES AXIS=X
 
[gcode_macro Test_NOISE]
gcode: 
 MEASURE_AXES_NOISE
  
[gcode_macro D_PID_EXT_200]
gcode:
 M106 S255
 PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro D_PID_EXT_220]
gcode:
 M106 S255
 PID_CALIBRATE HEATER=extruder TARGET=220

[gcode_macro D_PID_BED_60]
gcode:
 PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro D_PID_BED_80]
gcode:
 PID_CALIBRATE HEATER=heater_bed TARGET=80

[gcode_macro D_PID_BED_105]
gcode:
 PID_CALIBRATE HEATER=heater_bed TARGET=105

[gcode_macro D_PID_BED_120]
gcode:
 PID_CALIBRATE HEATER=heater_bed TARGET=120
 
[gcode_macro D_PID_EXT_240]
gcode:
 M106 S255
 PID_CALIBRATE HEATER=extruder TARGET=240

[gcode_macro PA_0]
gcode : 
 SET_PRESSURE_ADVANCE ADVANCE=0
 SET_pressure_advance_smooth_time= 0
[gcode_macro PA_2]
gcode : 
 SET_PRESSURE_ADVANCE ADVANCE=.02
 
[gcode_macro PA_3]
gcode : 
 SET_PRESSURE_ADVANCE ADVANCE=.03
 
[gcode_macro PA_4]
gcode : 
 SET_PRESSURE_ADVANCE ADVANCE=.04

[gcode_macro PA_5]
gcode : 
 SET_PRESSURE_ADVANCE ADVANCE=.05 

[gcode_macro Set_Position_RES]
gcode:
 SET_KINEMATIC_POSITION z=120 X=194.5 Y=185

 
[gcode_macro DUMP_WARNINGS]
gcode:
  {% set parameters = ["printer.configfile.warnings:"] %}
  {% for warning in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
  {% endfor %}
  {action_respond_info(parameters|join("\n"))}
 
[gcode_macro XMINUS]
gcode:
 force_move stepper=stepper_x distance=-50 VELOCITY=30
 
[gcode_macro XPLUS]
gcode:
 force_move stepper=stepper_x distance=50 VELOCITY=30
 
[gcode_macro YPLUS]
gcode:
 force_move stepper=stepper_y distance=50 VELOCITY=30
 
[gcode_macro Yminus]
gcode:
 force_move stepper=stepper_y distance=-50 VELOCITY=30

[gcode_macro STEPPERBUZZ_X]
gcode:
 STEPPER_BUZZ STEPPER=stepper_x
 
[gcode_macro STEPPERBUZZ_y]
gcode:
 STEPPER_BUZZ STEPPER=stepper_y
 
[gcode_macro STEPPERBUZZ_Z]
gcode:
 STEPPER_BUZZ STEPPER=stepper_z
 STEPPER_BUZZ STEPPER=stepper_z1
 STEPPER_BUZZ STEPPER=stepper_z2

[gcode_macro M600]
variable_extr_temp: 0
gcode:
 PAUSE
 G91
 G1 E-.8 F2700
 G1 Z{10}
 G90
 G1 X{100} Y{0} F3000

[gcode_macro M204]
rename_existing: M204.1
gcode:
  {% set f = params.F|default(0.5)|float %}

  {% if 'S' in params %}
    {% set s = params.S|float %}
    SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
  {% else %}
    {% if 'P' in params %}
      {% set p = params.P|float %}
      {% if 'T' in params %}
        {% set t = params.T|float %}
        {% if p < t %}
          SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
        {% else %}
          SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
        {% endif %}
      {% else %}
        SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
      {% endif %}
    {% elif 'T' in params %}
      {% set t = params.T|float %}
      SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
    {% endif %}
  {% endif %}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 1
; minimum probe count
variable_min_probe_count : 3
;variable_min_probe_count : 5
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

        {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|float %}
        {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|float %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x))|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y))|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}

            BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}

[gcode_macro Belt_Tension]
gcode:
 TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data
 TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }

	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30*60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

	{% for i in range(iterations) %}
		# Large pattern
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home and get position again for comparison:
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30*60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro M204]
rename_existing: M204.1
gcode:
  {% set f = params.F|default(0.5)|float %}

  {% if 'S' in params %}
    {% set s = params.S|float %}
    SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
  {% else %}
    {% if 'P' in params %}
      {% set p = params.P|float %}
      {% if 'T' in params %}
        {% set t = params.T|float %}
        {% if p < t %}
          SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
        {% else %}
          SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
        {% endif %}
      {% else %}
        SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
      {% endif %}
    {% elif 'T' in params %}
      {% set t = params.T|float %}
      SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
    {% endif %}
  {% endif %}

[gcode_macro M205]
gcode:
 {% set X = params.X|default(5)|float %}
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={X}
  
[gcode_macro M900]
gcode: 
 {% set K = params.K|default(0)|float %}
 {% set L = params.L|default(0)|float %}
 SET_PRESSURE_ADVANCE ADVANCE={K}
 #SET_PRESSURE_ADVANCE SMOOTH_TIME={L}
